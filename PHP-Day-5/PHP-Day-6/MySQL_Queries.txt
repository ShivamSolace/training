SHOW DATABASE;

CREATE DATABASE DATABASENAME;

DROP DATABASE  DATABASE_NAME;

USE DATABASENAME;

SHOW TABLES;

CREATE TABLE TABLENAME (
    COLUMN1 DATATYPE,
    COLUMN2 DATATYPE,
    COLUMN3 DATATYPE,
   ....
CONSTRAINTS ....
);

ALTER TABLE TABLENAME ADD COLUMNNAME DATATYPE;

ALTER TABLE TABLENAME DROP COLUMN COLUMNNAME;

ALTER TABLE TABLENAME
ALTER COLUMN COLUMNNAME DATATYPE;

ALTER TABLE TABLENAME 
ADD PRIMARY KEY (COLUMNNAME,...);

ALTER TABLE TABLENAME
DROP PRIMARY KEY;

ALTER TABLE TABLENAME1 ADD FOREIGN KEY (COLUMN1) REFERENCES TABLENAME2(COLUMN2);


ALTER TABLE TABLENAME DROP FOREIGN KEY FOREIGNKEY_NAME;

RENAME TABLE OLD_TABLENAME TO NEW_TABLENAME;

DROP TABLE TABLE_NAME;

TRUNCATE TABLE TABLENAME;

DESCRIBE TABLE_NAME;    or DESC TABLE_NAME;

DESCRIBE TABLE_NAME COLUMN_NAME;        or  DESC TABLE_NAME COLUMN_NAME;

SELECT * FROM TABLENAME;

SELECT * FROM TABLENAME1,TABLENAME2;

SELECT * FROM TABLENAME WHERE CONDITION;

SELECT * FROM TABLENAME WHERE CONDITION1 AND CONDITION2;

SELECT * FROM TABLENAME WHERE CONDITION1 OR CONDITION2;

SELECT * FROM TABLENAME WHERE NOT CONDITION;

SELECT * FROM TABLENAME WHERE CONDITION GROUP BY COLUMN3;

SELECT COUNT(COLUMN1) FROM TABLENAME ORDER BY COLUMN2 HAVING COUNT(COLUMN1)>3;


SELECT DISTINCT (COLUMN1) FROM TABLENAME;

SELECT * FROM TABLENAME ORDER BY COLUMN1 ASC|DESC;

SELECT COLUMN1 AS NEWNAME FROM TABLENAME;

SELECT COLUMN1 FROM TABLENAME WHERE COLUMN1 LIKE ‘%PATTERN%’;

INSERT INTO TABLENAME (COLUMN1,COLUMN2…) VALUES (VALUE1,VALUE2…);

INSERT INTO TABLENAME (COLUMN1,COLUMN2…) VALUES (VALUE1A,VALUE2A…),(VALUE1B,VALUE2B,...);

DELETE FROM TABLENAME;

DELETE FROM TABLENAME WHERE CONDITION;

SELECT * FROM TABLENAME WHERE AGE BETWEEN 25 AND 30;

SELECT * FROM TABLENAME WHERE COLUMN2 IN (V1,V2…);

SELECT * FROM TABLE NAME WHERE EXIST (SUB QUERY);

UPDATE TABLENAME SET COLUMNNAME=VALUE WHERE CONDITION;

SELECT COLUMN(S) FROM TABLENAME1 INNER JOIN TABLENAME2 ON TABLENAME1.COLUMNAME=TABLENAME2.COLUMNAME;

SELECT COLUMN(S) FROM TABLENAME1 LEFT JOIN TABLENAME2 ON TABLENAME1.COLUMNAME=TABLENAME2.COLUMNAME;

SELECT COLUMN(S) FROM TABLENAME1 RIGHT JOIN TABLENAME2 ON TABLENAME1.COLUMNAME=TABLENAME2.COLUMNAME;

SELECT COLUMN(S) FROM TABLE1 CROSS JOIN TABLE2;

SELECT COLUMN(S) FROM TABLENAME1 FULL OUTER JOIN TABLENAME2 ON TABLENAME1.COLUMNAME=TABLENAME2.COLUMNAME WHERE CONDITION;

SELECT * FROM TABLENAME1
UNION SELECT * FROM TABLENAME2;

SELECT * FROM TABLENAME1
UNION ALL SELECT * FROM TABLENAME2;

SELECT CONCAT(COLUMN1, " ", POSTALCODE, " ", COLUMN2) AS NEWCOL
FROM TABLENAME;

SELECT COUNT(COLUMN_NAME)
FROM TABLE_NAME
WHERE CONDITION;


SELECT SUM(COLUMN_NAME)
FROM TABLE_NAME
WHERE CONDITION;

SELECT AVG(COLUMN_NAME)
FROM TABLE_NAME
WHERE CONDITION;

SELECT MIN(COLUMN_NAME)
FROM TABLE_NAME
WHERE CONDITION;

SELECT MAX(COLUMN_NAME)
FROM TABLE_NAME
WHERE CONDITION;

CREATE INDEX indexname
ON tablename (column1, column2, ...);

CREATE UNIQUE INDEX indexname
ON tablename (column1, column2, ...);

DROP INDEX INDEXNAME;

CREATE VIEW VIEWNAME AS SELECT COLUMN1,COLUMN2 FROM TABLE WHERE CONDITION;

CREATE OR REPLACE viewname 
AS 
SELECT COLUMN1,COLUMN2 FROM TABLE WHERE CONDITION;

RENAME TABLE VIEWNAME TO NEWVIEWNAME;

DROP VIEW VIEWNAME;

DROP VIEW VIEW1,VIEW2…;




Four people are on this side of the bridge. Everyone has to get across. 
Problem is that it’s dark and so you can’t cross the bridge without a flashlight and they only have one flashlight. 
Plus the bridge is only big enough for two people to cross at once. 
The four people walk at different speeds:
one fella is so fast it only takes him 1 minute to cross the bridge,
another 2 minutes,
a third 5 minutes,
the last it takes 10 minutes to cross the bridge.
When two people cross the bridge together (sharing the flashlight), they both walk at the slower person’s pace. What is the minimum time required for all 4 to cross the bridge.

Respond with a number which represents the number of minutes.


////------------------------------------    0mins   initial

//-------------------------------------//   2mins       1st forword

///-------------------------------------/   3mins       1st return

/--------------------------------------///   8mins      2nd forword

//-------------------------------------//   9mins       2nd return

---------------------------------------//// 19mins      3rd forword